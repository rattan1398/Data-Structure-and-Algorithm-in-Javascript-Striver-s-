function mergeSort(array){
    
    function merge(array,low,mid,high){ 
        let tempArray = []; //create an empty array
        let left = low; //first index of the left side array
        let right = mid+1; //first index of the right side array
        while(left <= mid && right<=high){  //till the last element of the left-side array and last lement of the right-side array
            if(array[left] <= array[right]){  //if left is smaller or equal, push it into earlier crerated tempArray and increment left
                tempArray.push(array[left]);
                left++;
            }else{
                tempArray.push(array[right]); //if right is smaller or equal, push it into earlier crerated tempArray and increment right
                right++;
            }
        }
        while(left <= mid){ //if element left after abive task in left-side array push as it is them at tempArray.
            tempArray.push(array[left]);
            left++;
        }
        while(right<=high){
            tempArray.push(array[right]); //if element left after abive task in right-side array push as it is them at tempArray.
            right++;
        }
        for(let i=low; i<=high; i++){ //fill original array from tempArray
            array[i] = tempArray[i-low];
        }
    
    }

    function mS(array, low, high) { 
        if (low == high) return; //base case for stopping recursion
          let mid = Math.floor((low + high) / 2); //mid value of the array
          mS(array, low, mid); //call function from low to mid value
          mS(array, mid + 1, high); //call function from mid+1 to high
          merge(array,low,mid,high); //call merge function 
        
    }
    
    
    mS(array,0,array.length-1);
    return array;
}
